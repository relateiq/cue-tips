#!/bin/bash -e

# export these things because parallel
export TAPE_CMD=node_modules/tape/bin/tape
export KARMA_CMD=node_modules/karma/bin/karma
export BROWSERIFY_CMD=node_modules/browserify/bin/cmd.js
export EXORCIST_CMD=node_modules/exorcist/bin/exorcist.js
export WATCHIFY_CMD=node_modules/watchify/bin/cmd.js
export WATCH_CMD=node_modules/chokidar-cli/index.js
export SASS_CMD=node_modules/node-sass/bin/node-sass
PARALLEL_CMD='parallel --line-buffer --halt 2'

# read some names out of the package.json
export ENTRY_POINT=$(cat package.json | jq -r .main);
export DEFAULT_NAME=$(cat package.json | jq -r .name);

# configuration settings
export FEAT_BROWSERIFY=$(cat package.json | jq -r .iqproj.browserify)
export FEAT_SCSS=$(cat package.json | jq -r .iqproj.scss)
export FEAT_APP=$(cat package.json | jq -r .iqproj.app)

self=$0
command=$1
shift

echo "# RUN $command $*"

# super basic override functionality.  allow shipping with a base task,
# but allow that task to be overridden by creating a file in build/commandname
# BONUS: also lets you add new commands (written in any language!)
if [ -f "build/$command" ]; then
    echo "** Override: $command (build/$command)"
    exec build/$command $*
fi

# basic build commands for getting up and running quickly:
#   * unit test running with tape
#   * local server
#   * clean/prep tasks
#   * individual build/watch steps for templates, assets, scss, and js (browserify)
case $command in
    # npm lifecycle commands
    "test")
        if [ "$FEAT_APP" = "true" ]; then
            $KARMA_CMD start --single-run --no-auto-watch karma.conf.js 
        else
            $TAPE_CMD ${1:-src/**/*.spec.js}
        fi
        ;;

    # basic housekeeping tasks
    "prep")       mkdir -p release ;;
    "clean")      rm -rf release/* ;;
    "assets")     [ -d assets ] && $self prep && cp -R assets release ;;

    # testing
    "watch:test") 
        if [ "$FEAT_APP" = "true" ]; then
            $KARMA_CMD start karma.conf.js 
        else
            $self test && $WATCH_CMD --silent ${1-src/**/*.spec.js} -c "$self test" 
        fi
        ;;

    # browserify feature
    "watch:js")   $self prep && $WATCHIFY_CMD $ENTRY_POINT -d -o "$EXORCIST_CMD release/${DEFAULT_NAME}.js.map > release/${DEFAULT_NAME}.js" ;;
    "build:js")   $self prep && $BROWSERIFY_CMD $ENTRY_POINT -d | $EXORCIST_CMD release/${DEFAULT_NAME}.js.map > release/${DEFAULT_NAME}.js ;;

    # scss feature
    "watch:scss") $self prep && $self build:scss && $WATCH_CMD --silent 'src/**/*.scss' -c "$self build:scss"  ;;
    "build:scss") [ -f src/${DEFAULT_NAME}.scss ] && $self prep && $SASS_CMD src/${DEFAULT_NAME}.scss > release/${DEFAULT_NAME}.css ;;

    # app feature
    "watch:html") $self build:html && $WATCH_CMD --silent app/* -c "$self build:html" ;;
    "build:html") $self prep && cp app/index.html release/ ;;
    "watch:app")  $self prep && $self build:app && $WATCHIFY_CMD app/index.js -d -o "$EXORCIST_CMD release/app.js.map > release/app.js" ;;
    "build:app")  $self prep && $BROWSERIFY_CMD app/index.js -d | $EXORCIST_CMD release/app.js.map > release/app.js ;;
    "livereload") $self prep && $WATCH_CMD --silent release/* -c 'curl -s http://localhost:35729/changed\?files\=index.html' ;;

    # entry points
    "start"|"watch")
        features=("$self watch:test")

        if [ "$FEAT_APP" = "true" ]; then
            features+=(\
                "$self watch:app" \
                "$self watch:html" \
                "$self watch:scss" \
                "$self watch:js" \
                "$self serve" \
                "$self livereload" \
            );
        fi

        $PARALLEL_CMD ::: "${features[@]}"
        ;;

    "build")
        features=("$self assets" "$self test")

        if [ "$FEAT_APP" = "true" ]; then
            features+=( \
                "$self build:scss" \
                "$self build:js" \
                "$self build:app" \
                "$self build:html" \
            );
        fi

        $self clean &&
        $self prep &&
        $PARALLEL_CMD ::: "${features[@]}"
        ;;

    *)
        echo "Unknown command: $command"
        exit 1
esac

echo "---DONE: $command $*"

